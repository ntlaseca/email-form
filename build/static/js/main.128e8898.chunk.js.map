{"version":3,"sources":["components/EmailChips/EmailChips.js","serviceWorker.js","index.js"],"names":["EmailChips","props","state","value","emails","error","handleChange","e","setState","target","handleKeyDown","includes","key","preventDefault","email","trim","isValid","handleClick","handleDelete","deleteEmail","filter","bind","this","isEmail","test","className","Card","map","Chip","color","label","onClick","onDelete","TextField","fullWidth","id","variant","onChange","onKeyDown","helperText","Button","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"gUAgIeA,G,wDAvHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,MAAQ,CACNC,MAAO,GACPC,OAAQ,GACRC,MAAO,MAVU,EAanBC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZL,MAAOI,EAAEE,OAAON,MAChBE,MAAO,QAhBQ,EAoBnBK,cAAgB,SAACH,GACf,GAAI,CAAC,QAAS,MAAO,KAAKI,SAASJ,EAAEK,KAAM,CACzCL,EAAEM,iBAEF,IAAIC,EAAQ,EAAKZ,MAAMC,MAAMY,OAEzBD,GAAS,EAAKE,QAAQF,IACxB,EAAKN,SAAS,CACZJ,OAAO,GAAD,mBAAM,EAAKF,MAAME,QAAjB,CAAyBU,IAC/BX,MAAO,OA7BI,EAmCnBc,YAAc,aAnCK,EAuCnBC,aAAe,SAACC,GACd,EAAKX,SAAS,CACZJ,OAAQ,EAAKF,MAAME,OAAOgB,QAAO,SAAAN,GAAK,OAAIA,IAAUK,QAvCtD,EAAKb,aAAe,EAAKA,aAAae,KAAlB,gBACpB,EAAKX,cAAgB,EAAKA,cAAcW,KAAnB,gBACrB,EAAKH,aAAe,EAAKA,aAAaG,KAAlB,gBAJH,E,oDA6CXP,GACN,IAAIT,EAAQ,KAMZ,OAJKiB,KAAKC,QAAQT,KAChBT,EAAK,UAAMS,EAAN,mCAGHT,IACFiB,KAAKd,SAAS,CAAEH,WACT,K,8BAMHS,GACN,MAAO,oCAAoCU,KAAKV,K,+BAGxC,IAAD,OACP,OACE,yBAAKW,UAAU,OAEb,kBAACC,EAAA,EAAD,CAAMD,UAAU,oCAEd,wBAAIA,UAAU,QAAd,kBACCH,KAAKpB,MAAME,OAAOuB,KAAI,SAAAb,GAAK,OACxB,kBAACc,EAAA,EAAD,CACEH,UAAU,iBACVI,MAAM,UACNC,MAAOhB,EACPiB,QAAS,EAAKd,YACde,SAAU,kBAAM,EAAKd,aAAaJ,SAKxC,6BACE,kBAACmB,EAAA,EAAD,CACEC,WAAS,EACTT,UAAU,kBACVU,GAAG,SACHC,QAAQ,SACRN,MAAM,kDACN3B,MAAOmB,KAAKpB,MAAMC,MAClBkC,SAAUf,KAAKhB,aACfgC,UAAWhB,KAAKZ,cAChB6B,WAAW,0BAAMd,UAAU,SAASH,KAAKpB,MAAMG,UAKnD,yBAAKoB,UAAU,8BACb,kBAACe,EAAA,EAAD,CACEJ,QAAQ,YACRP,MAAM,WAFR,UAMA,kBAACW,EAAA,EAAD,CACEf,UAAU,OACVW,QAAQ,YACRP,MAAM,WAHR,e,GAzGaY,IAAMC,YCIXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtD,GACLuD,QAAQvD,MAAMA,EAAMwD,c","file":"static/js/main.128e8898.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport Chip from '@material-ui/core/Chip';\nimport TextField from '@material-ui/core/TextField';\n\nimport './EmailChips.scss';\n\nclass EmailChips extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n  }\n\n  state = {\n    value: '',\n    emails: [],\n    error: null\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      value: e.target.value,\n      error: null\n    });\n  };\n\n  handleKeyDown = (e) => {\n    if (['Enter', 'Tab', ','].includes(e.key)) {\n      e.preventDefault();\n\n      let email = this.state.value.trim();\n\n      if (email && this.isValid(email)) {\n        this.setState({\n          emails: [...this.state.emails, email],\n          value: ''\n        });\n      }\n    }\n  };\n\n  handleClick = () => {\n\n  };\n\n  handleDelete = (deleteEmail) => {\n    this.setState({\n      emails: this.state.emails.filter(email => email !== deleteEmail)\n    });\n  };\n\n  isValid(email) {\n    let error = null;\n\n    if (!this.isEmail(email)) {\n      error = `${email} is not a valid email adress.`;\n    }\n\n    if (error) {\n      this.setState({ error });\n      return false;\n    }\n\n    return true;\n  };\n\n  isEmail(email) {\n    return /[\\w\\d\\.-]+@[\\w\\d\\.-]+\\.[\\w\\d\\.-]+/.test(email);\n  };\n\n  render() {\n    return (\n      <div className=\"row\">\n\n        <Card className=\"bg-dark text-white col-xl-12 p-4\">\n\n          <h1 className=\"mb-5\">Invite Members</h1>\n          {this.state.emails.map(email => (\n              <Chip\n                className=\"mb-3 mr-1 mb-1\"\n                color=\"primary\"\n                label={email}\n                onClick={this.handleClick}\n                onDelete={() => this.handleDelete(email)}\n              />\n            )\n          )}\n\n          <div>\n            <TextField\n              fullWidth\n              className=\"text-white mb-5\"\n              id=\"filled\"\n              variant=\"filled\"\n              label=\"Type or paste email addresses and press `Enter`\"\n              value={this.state.value}\n              onChange={this.handleChange}\n              onKeyDown={this.handleKeyDown}\n              helperText=<span className=\"error\">{this.state.error}</span>\n            />\n\n          </div>\n\n          <div className=\"d-flex justify-content-end\">\n            <Button\n              variant=\"contained\"\n              color=\"default\"\n            >\n              Cancel\n            </Button>\n            <Button\n              className=\"ml-2\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Send\n            </Button>\n          </div>\n\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default EmailChips;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport EmailChips from './components/EmailChips/EmailChips';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <EmailChips />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}